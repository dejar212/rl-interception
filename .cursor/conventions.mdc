# Соглашения по разработке

> Полное видение проекта см. в [vision.md](./vision.md)

## Основные принципы

### 1. KISS > Всё остальное
- Простой код без "умных" решений и сложных паттернов
- Явное лучше неявного
- Сначала работающее решение, потом оптимизация
- Минимум абстракций, максимум конкретики

### 2. Структура кода
- **Плоская иерархия**: максимум 2 уровня вложенности
- **Один файл = одна ответственность**: не смешивать алгоритмы, среду, визуализацию
- **Изоляция компонентов**: среда не знает об алгоритмах, визуализация не знает о тренировке
- Следуй структуре из [vision.md § 3](./vision.md#3-структура-проекта)

### 3. Технологии (см. [vision.md § 1](./vision.md#1-технологии))
- **Python 3.10+** с type hints для публичных функций
- **Стандартные интерфейсы**: `gymnasium.Env`, CleanRL стиль алгоритмов
- **YAML** для конфигов + `dataclasses` для типизации
- **Не использовать**: Ray, Docker, веб-фреймворки, БД, MLflow

### 4. Качество кода
- Type hints обязательны для публичных функций и методов
- Комментарии только где неочевидно (не дублируй код словами)
- Имена переменных: понятные английские или транслит (не однобуквенные кроме `i, j, x, y`)
- **Без юнит-тестов** на этапе MVP

### 5. Воспроизводимость
- Всегда фиксируй random seeds (Python, NumPy, PyTorch, Gymnasium)
- Сохраняй полные конфиги экспериментов
- Используй timestamp для версионирования результатов

### 6. YAGNI - Не делай
- ❌ Абстрактные базовые классы "на будущее"
- ❌ Универсальные решения для всех возможных случаев
- ❌ Распределенное обучение
- ❌ Сложные паттерны проектирования (фабрики, стратегии, etc)
- ✅ Конкретное решение конкретной задачи перехвата

### 7. Именование и организация
- **Алгоритмы**: `algorithms/ppo.py`, `algorithms/sac.py` - каждый в отдельном файле
- **Конфиги**: `configs/ppo_config.yaml`, `configs/env_default.yaml`
- **Результаты**: `results/models/*.pth`, `results/logs/*.json`, `results/plots/*.png`
- **Эксперименты**: `experiments/train.py`, `experiments/compare.py`, `experiments/evaluate.py`

### 8. Git
- Коммиты по логическим частям функциональности
- Linear history без сложных merge стратегий
- `results/` в `.gitignore`

## Быстрые правила генерации кода

1. **Начинай с простейшего работающего варианта**
2. **Используй CleanRL стиль** для алгоритмов - однофайловые, понятные реализации
3. **Gymnasium интерфейс** для среды: `reset()`, `step()`, `render()`
4. **YAML конфиги** для всех параметров - никаких хардкодов
5. **Прямые импорты** - без фабрик и регистраций
6. **Логика в функциях** - не в классах, если не нужно состояние
7. **Matplotlib для визуализации** - простые функции построения графиков
8. **Сохраняй результаты** в `results/` с timestamp
9. **Проверяй типы** - используй type hints, но без mypy на MVP
10. **Документация в коде** только где действительно нужно

## Проверка перед коммитом

- [ ] Код работает без ошибок
- [ ] Следует структуре из vision.md
- [ ] Нет избыточных абстракций
- [ ] Type hints для публичных API
- [ ] Конфиги в YAML, не хардкод
- [ ] Результаты сохраняются в `results/`
- [ ] Код понятен без длинных комментариев

