#!/bin/bash

# –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ (–º–µ–Ω—å—à–µ timesteps –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
# Usage: ./run_quick_test.sh

set -e  # Exit on error

echo "=================================="
echo "üß™ Quick Test Experiment (Fast)"
echo "=================================="
echo ""

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
SEED=42
ALGORITHMS="ppo sac"  # –¢–æ–ª—å–∫–æ 2 –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
CONFIG_PREFIX="balanced"
TEST_SUITE="configs/test_suite.json"

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º timesteps
echo "Creating quick test configs..."
mkdir -p configs/quick_test

for algo in ppo sac; do
    # –ö–æ–ø–∏—Ä—É–µ–º –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
    cp configs/balanced_${algo}.yaml configs/quick_test/quick_${algo}.yaml
    
    # –ó–∞–º–µ–Ω—è–µ–º total_timesteps –Ω–∞ 10000 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        sed -i '' 's/total_timesteps: 200000/total_timesteps: 10000/' configs/quick_test/quick_${algo}.yaml
    else
        # Linux
        sed -i 's/total_timesteps: 200000/total_timesteps: 10000/' configs/quick_test/quick_${algo}.yaml
    fi
done

echo "  ‚úì Quick configs created"
echo ""

# –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏
echo "Step 1: Checking test suite..."
if [ ! -f "$TEST_SUITE" ]; then
    echo "  Generating test suite..."
    python3 utils/test_suite_generator.py
else
    echo "  ‚úì Test suite already exists"
fi
echo ""

# –®–∞–≥ 2: –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ PPO –∏ SAC, 10K timesteps)
echo "Step 2: Quick training (10K timesteps, 2 algorithms)..."
echo "  This should take ~5-10 minutes"
echo ""

python3 experiments/parallel_train.py \
    --algorithms $ALGORITHMS \
    --config-prefix quick_test/quick \
    --seed $SEED \
    --output-dir results/quick_test

# –ù–∞—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
TRAINING_DIR=$(ls -td results/quick_test/* | head -1)
MODELS_INFO="$TRAINING_DIR/trained_models.json"

echo ""
echo "  ‚úì Training completed"
echo "  Results: $TRAINING_DIR"
echo ""

# –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ 20 —Å—Ä–µ–¥–∞—Ö (–¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
echo "Step 3: Quick testing (20 environments)..."
echo ""

# –°–æ–∑–¥–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É
python3 -c "
import json
with open('$TEST_SUITE', 'r') as f:
    data = json.load(f)
# –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ä–µ–¥
data['environments'] = data['environments'][:20]
data['metadata']['n_environments'] = 20
with open('configs/quick_test_suite.json', 'w') as f:
    json.dump(data, f, indent=2)
print('Created quick test suite with 20 environments')
"

python3 experiments/test_on_suite.py \
    --models-info "$MODELS_INFO" \
    --test-suite "configs/quick_test_suite.json" \
    --output-dir results/quick_test_evaluation \
    --deterministic

# –ù–∞—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
EVAL_DIR=$(ls -td results/quick_test_evaluation/* | head -1)

echo ""
echo "  ‚úì Testing completed"
echo "  Results: $EVAL_DIR"
echo ""

# –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
echo "=================================="
echo "‚úÖ Quick test completed!"
echo "=================================="
echo ""
echo "Results locations:"
echo "  Training: $TRAINING_DIR"
echo "  Testing:  $EVAL_DIR"
echo ""
echo "Summary:"
cat "$EVAL_DIR/summary.json"
echo ""
echo "To run full experiment (200K timesteps, 4 algorithms, 100 envs):"
echo "  ./run_full_experiment.sh"
echo ""

